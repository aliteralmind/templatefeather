<project name="templatefeather" default="help" basedir=".">

   <property environment="ENV"/>

<!-- Global properties...START -->

   <!--  Read in the properties file.  -->
   <property file="build.properties"/>

   <property name="fs" value="${file.separator}"/>      <!-- Shortcut -->

   <property name="project_name_fs" value="${project.name}${fs}"/>
   <property name="project_name_for_dir" value="${project.name}_${version.number.for.dir.name}"/>

   <!-- com.github.xbn..., ignoring base directories -->
   <property name="com_github_alit" value="com${fs}github${fs}aliteralmind${fs}"/>
      <property name="cg_alit_feather" value="${com_github_alit}${project.name}${fs}"/>
      <property name="cgx_feather_examples" value="${cg_alit_feather}examples${fs}"/>
      <property name="cgx_feather_test" value="${cg_alit_feather}test${fs}"/>

   <!-- Using base directories -->
   <property name="dir_sandbox_parent" value="${sandbox.dir}${fs}"/>
      <property name="dir_sandbox" value="${dir_sandbox_parent}${project_name_fs}"/>
         <property name="dir_sandbox_src" value="${dir_sandbox}src${fs}"/>
         <property name="dir_sandbox_examples" value="${dir_sandbox}examples${fs}"/>
         <property name="dir_sandbox_test" value="${dir_sandbox}test${fs}"/>

   <property name="dir_sandbox_parent" value="${sandbox.dir}${fs}"/>
      <property name="dir_sandbox" value="${dir_sandbox_parent}${project_name_fs}"/>
         <property name="dir_sandbox_src_xbn" value="${dir_sandbox}com${fs}github${fs}aliteralmind${fs}"/>
         <property name="dir_sandbox_bldfiles" value="${dir_sandbox}z_build${fs}"/>
            <property name="dir_sandbox_src_xbn_ant" value="${dir_sandbox_src_xbn}testdev${fs}ant${fs}"/>
            <property name="dir_sandbox_jar_dependencies" value="${dir_sandbox_bldfiles}jar_dependencies${fs}"/>

   <property name="dir_build_parent" value="${build.dir}${fs}"/>
      <property name="dir_classes_parent" value="${build.class.dir}${fs}"/>
      <property name="dir_classes_xbn" value="${dir_classes_parent}com${fs}github${fs}aliteralmind${fs}"/>
   <property name="dir_build" value="${dir_build_parent}${project_name_for_dir}${fs}"/>
   <property name="dir_build_download" value="${dir_build}download${fs}"/>
      <property name="DIR_bld_src" value="${dir_build}com${fs}github${fs}aliteralmind${fs}"/>
      <property name="DIR_bld_docs" value="${dir_build}documentation${fs}"/>
         <property name="dir_build_docs_javadoc" value="${DIR_bld_docs}javadoc${fs}"/>

      <property name="dir_working" value="${working.dir}${fs}${project_name_fs}"/>

<!-- Global properties...END -->

   <!-- See: http://stackoverflow.com/questions/5103384/ant-warning-includeantruntime-was-not-set -->
   <property name="includeantruntime" value="false"/>

<!-- CLASSPATH and custom tasks...START -->
   <path id="project_classpath">
      <fileset dir="${dir_sandbox_jar_dependencies}">
         <include name="commons-collections4-4.0.jar"/>
         <include name="commons-io-2.4.jar"/>
         <include name="commons-lang3-3.3.2.jar"/>
         <include name="junit-4.8.2.jar"/>
         <include name="xbnjava_0p1p0_templatefeather_needed_only.jar"/>
         <include name="codelet_0p1p0_all.jar"/>
         <include name="guava-16.0.1.jar"/>
      </fileset>
   </path>

   <taskdef name="propfromrplc" classname="com.github.xbn.testdev.ant.ATPropFromRplc" classpathref="project_classpath"/>

<!-- CLASSPATH and custom tasks...END -->
   <target name="help" description="Getting started information">
      <echo>This is the Ant build file for ${project.name}.  Try
ant -projecthelp

Installation of the Template Feather build process is done in a single step: By changing 'base.dir', in build.properties, to your installation directory.

--To do a full build of XBN-Java--

The *documentation* for Template Feather uses codelets. But Codelet is based on Template Feather. Hence, the rigamarole:
  -1- Build Template Feather (part 1 of 2):
     -1.a- ant refresh
     -1.b- ant pubprecodelet
  -2- Build Codelet:
     - ant publish
  -3- Finish building Template Feather (part 2 of 2):
     - ant pubpostcodelet

Documentation for Template Feather can be generated before Codelet is built. The example codes will be excluded.</echo>
   </target>

   <target name="copyxbnjar" description="Duplicates the 'core' and 'all' jars from XBN-Java's build/download directory">
      <copy file="${xbn_project_jar_in_build_pre_core_dot_jar}_core.jar" todir="${dir_sandbox_jar_dependencies}"/>
      <copy file="${xbn_project_jar_in_build_pre_core_dot_jar}_all.jar" todir="${dir_sandbox_jar_dependencies}"/>
   </target>
   <target name="-autocopyxbnjar" if="do.auto.copy.xbn.jar">
      <antcall target="copyxbnjar"/>
   </target>

  <property name="dir_sandbox_ant_subxml" value="${dir_sandbox_bldfiles}ant_sub_files${fs}"/>
  <import file="${dir_sandbox_ant_subxml}backup.xml"/>
  <import file="${dir_sandbox_ant_subxml}compile.xml"/>
  <import file="${dir_sandbox_ant_subxml}javadoc.xml"/>
  <import file="${dir_sandbox_ant_subxml}refresh.xml"/>

   <!-- For Jeff Epstein only. Does not exist in published version: -->
      <import file="${dir_sandbox_ant_subxml}gitonly_sandbox__execute_from_main_sandbox_only.xml"
         optional="true"/>

   <target name="copycodeletjar" description="Duplicates the 'all' jar file from Codelet">
      <copy file="${codelet.jar.path.in.codelet.build.dir}" todir="${dir_sandbox_jar_dependencies}"/>
   </target>
   <target name="-autocopycodeletjar" if="do.auto.copy.codelet.jar">
      <copy file="${codelet.jar.path.in.codelet.build.dir}" todir="${dir_sandbox_jar_dependencies}"/>
   </target>

   <target name="publish" description="Full build of Template Featherweight.">
      <antcall target="pubprecodelet"/>
      <antcall target="pubpostcodelet"/>
   </target>
   <target name="pubprecodelet" description="cq, compileposttabs2, pubprecodelet2">
      <antcall target="refresh"/>
      <record name="${dir_build}build_log_pre_codelet.txt" action="start"/>
      <antcall target="compileprecodelet"/>
      <antcall target="-autocopyxbnjar"/>
      <antcall target="pubprecodelet2"/>
      <record name="${dir_build}build_log_pre_codelet.txt" action="stop"/>
   </target>

   <target name="pubprecodelet2" description="compilexmpl, cx2, pubprecodelet3">
      <antcall target="compilexmpl"/>
      <antcall target="cx2"/>
      <antcall target="pubprecodelet3"/>
   </target>

   <target name="pubprecodelet3" description="compiletest, jar, unit">
      <antcall target="compiletest"/>
      <antcall target="jar"/>
      <antcall target="unit"/>
   </target>

   <target name="pubpostcodelet" description="compilepostcodelet, doc, zip">
      <record name="${dir_build}build_log_post_codelet.txt" action="start"/>
      <antcall target="-autocopycodeletjar"/>
      <antcall target="doczip"/>
      <record name="${dir_build}build_log_post_codelet.txt" action="stop"/>
   </target>

   <target name="doczip" description="doc, doc2, zip, zip2">
      <antcall target="doc"/>
      <antcall target="doc2"/>
      <antcall target="zip"/>
      <antcall target="zip2"/>
   </target>

   <target name="unit" description="Executes all unit tests">
      <java classname="com.github.aliteralmind.templatefeather.test.UnitTestRunner" failonerror="true"/>
   </target>

      <property name="download_zip_source_name" value="${project_name_for_dir}_source_code.zip"/>
      <property name="download_zip_source" value="${dir_build_download}${download_zip_source_name}"/>
      <property name="download_zip_docs_name" value="${project_name_for_dir}_documentation.zip"/>
      <property name="download_zip_docs" value="${dir_build_download}${download_zip_docs_name}"/>
      <property name="download_zip_source_name" value="${project_name_for_dir}_source_code.zip"/>
      <property name="download_zip_source" value="${dir_build_download}${download_zip_source_name}"/>
      <property name="download_zip_docs_name" value="${project_name_for_dir}_documentation.zip"/>
      <property name="download_zip_docs" value="${dir_build_download}${download_zip_docs_name}"/>
   <target name="zip" description="Creates end-user download archives for source-code, documentation, and jars. Also creates placeholder-only build.properties and codelet.properties DIRECTLY INTO THE SANDBOX, with a 'placeholder__' prefix. Both the live and placeholder files are committed.">
      <copy todir="${dir_build}">
         <fileset dir="${dir_sandbox}" includes="LICENSE, README.md"/>
      </copy>

      <echo>xbnjavabuild.CreateTempBuildAndCodeletPropsForPublish</echo>
      <java classname="xbnjavabuild.CreateTempBuildAndCodeletPropsForPublish" failonerror="true">
         <arg value="${dir_sandbox}"/>
         <arg value="${codelet.config.dir}${fs}"/>
         <arg value="subproject"/>
         <arg value="debugminimal"/>
      </java>

      <echo>Creating source code download zip.</echo>
      <property name="download_zip_temp_location" value="${dir_working}${download_zip_source_name}"/>
      <delete file="${download_zip_source}"/>

      <zip destfile="${download_zip_temp_location}" whenempty="fail">
         <fileset dir="${dir_sandbox}">
            <exclude name=".git/**"/>
<!--
      BOTH (either) WORK:
            <exclude name="**/.git/**"/>
            <exclude name=".git/**"/>

      DOES NOT WORK:
            <exclude name="**/.git"/>
            <exclude name=".git"/>
 -->
            <exclude name="**/offline_package_lists/*"/>
            <exclude name="**/offline_package_lists/*"/>
            <exclude name="build.properties"/>
            <exclude name="**/codelet.properties"/>
         </fileset>
      </zip>

      <copy file="${dir_sandbox}placeholder__build.properties"
         tofile="${dir_working}build.properties"/>
      <mkdir dir="${dir_working}${codelet.config.dir}"/>
      <copy file="${dir_sandbox}${codelet.config.dir}${fs}placeholder__codelet.properties"
         tofile="${dir_working}${codelet.config.dir}${fs}codelet.properties"/>

      <zip destfile="${download_zip_temp_location}" update="true">
         <fileset dir="${dir_working}">
            <include name="build.properties"/>
            <include name="**/codelet.properties"/>
         </fileset>
         <fileset dir="${dir_sandbox}">
            <include name="**/offline_package_lists/java.txt"/>
         </fileset>
      </zip>

      <move file="${download_zip_temp_location}" todir="${dir_build_download}"/>

      <echo>Creating documentation download zip.</echo>
      <zip destfile="${download_zip_docs}" whenempty="fail"
         basedir="${dir_build_parent}"
         includes="${project_name_for_dir}${fs}documentation/**/*"/>
</target>
<target name="zip2" description="For starting execution somewhere in the middle of the 'zip' task.">
      <property name="xbn_and_all_dependency_jars_working_dir" value="${dir_working}${project_name_for_dir}_and_all_dependency_jars"/>

      <copy todir="${xbn_and_all_dependency_jars_working_dir}">
         <fileset dir="${dir_sandbox_jar_dependencies}"/>
      </copy>
      <copy todir="${xbn_and_all_dependency_jars_working_dir}">
         <fileset dir="${dir_build_download}" includes="xbn*.jar"/>
      </copy>

      <property name="xbn_and_all_dependency_jars_zip" value="${dir_build_download}${project_name_for_dir}_and_all_dependency_jars.zip"/>
      <zip destfile="${xbn_and_all_dependency_jars_zip}"
         whenempty="fail"
         basedir="${xbn_and_all_dependency_jars_working_dir}"/>
   </target>

   <!-- See http://ant.apache.org/faq.html#propertyvalue-as-name-for-property -->
   <macrodef name="propertywithdynamicallynamedvalue">
      <attribute name="propname"/>
      <attribute name="valuepropname"/>
      <sequential>
         <property name="@{propname}" value="${@{valuepropname}}"/>
      </sequential>
   </macrodef>

   <target name="pubprecodeletwithneededxbn" description="cq, compileposttabs2, pubprecodelet2">
      <antcall target="compileonlyneededxbnjava"/>
      <antcall target="compileonlyneededxbnjava2"/>
      <antcall target="pubprecodelet"/>
   </target>
</project>
